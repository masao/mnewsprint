#!@PERL@ -w
# -*-CPerl-*-
# $Id$

use IO::File;
use Getopt::Long;
use Pod::Usage;
use Cwd;
use Text::Tabs;

use strict;

my $DEBUG = undef;
my $PACKAGE = "@PACKAGE@";
my $VERSION = "@VERSION@";

my $Printer = "lp";
$Printer = "$ENV{'PRINTER'}" if defined($ENV{'PRINTER'});

my $Tmpdir = "/tmp";
$Tmpdir = "$ENV{'TMPDIR'}" if defined($ENV{'TMPDIR'});
$Tmpdir .= "/mnewsprint-$$";

my $File = "-";		# default is STDIN

my $PrintHeaders = "date,from,to,cc,newsgroups,subject";

my %Bold = ('subject' => 1);

my %Header = ();
my $Body = '';

main();
sub main {
    parse_options();
    mkdir($Tmpdir, 0700) || die "can't create $Tmpdir: $!";
    parse_message();
    fork && exit;	# Go background
    create_latex();
}

sub parse_options() {
    my $opt_help = undef;
    my $opt_version = undef;

    GetOptions ('f|file=s'	      => \$File,
		'P|printer=s'	      => \$Printer,
		'H|header=s'	      => \$PrintHeaders,
		'h|help'              => \$opt_help,
		'd|debug'             => \$DEBUG,
                'version'             => \$opt_version,
                ) || pod2usage(-exitval=>1, -verbose=>0);
    pod2usage(-exitval => 0, -verbose => 1)
        if ($opt_help);

    if ($opt_version) {
        print "$PACKAGE $VERSION\n";
	exit 0;
    }
}

sub parse_message() {
    my $fh = fopen($File);
    my @tmp = <$fh>;
    chomp(@tmp);
    while (@tmp) {
	my $line = shift @tmp;
	last if ($line =~ /^$/);

	while (defined($tmp[0]) && $tmp[0] =~ /^\s+/) {
            my $nextline = shift @tmp;
            $line =~ s/([\xa1-\xfe])\s+$/$1/;
            $nextline =~ s/^\s+([\xa1-\xfe])/$1/;
            $line .= $nextline;
	}

	if ($line =~ /^(\S+):\s*(.*)$/) {
	    $Header{lc($1)} = $2;
	}
    }
    if (defined($DEBUG)) {
	foreach my $key (keys %Header) {
  	    print " $key -> $Header{$key}\n";
	}
    }
    @tmp = expand(@tmp);
    for my $line (@tmp) {
	$line =~ s/\s+$//;
	$line = split_line($line);
	$line = escape_specials($line);
        # Don't do that if there is an HTML tag at first.
        if ($line !~ /^[^>]*</ && 
            $line =~ /^((\S{1,10}>)|(\s*[\>\|\:]+\s*))+/) {
	    $line =~ s/^/\\textcolor\{q\}\{/;
	    $line =~ s/$/\}/;
        }
	$Body .= $line . "\n";
    }
    $Body =~ s/\s+$//;
}

sub create_latex() {
    my $texfile = "$Tmpdir/mail.tex";
    my $header_str = format_header();
    my $realname = get_realname();

    my $fh = fopen("> $texfile");
    print $fh <<EOF;
\\documentclass{jsarticle}
\\usepackage[T1]{fontenc}
\\usepackage{babel}
\\usepackage[latin1]{inputenc}
\\usepackage{cmbright}
\\usepackage[a4paper,left=20mm,right=20mm,top=18mm,bottom=25mm,headsep=5mm]{geometry}
\\usepackage{lastpage,fancyhdr,misc,graphicx,alltt}
\\usepackage[dvips]{color}
\\definecolor{q}{gray}{0.4}
\\def\\ast{{\\tt\\symbol{"2A}}}
\\def\\bs{{\\tt\\symbol{"5C}}}
\\setlength{\\parindent}{0mm}
\\renewcommand{\\baselinestretch}{.8}
\\pagestyle{fancy}
\\lhead{\\itshape $realname}
\\rhead{\\bfseries $Header{'subject'}}
\\cfoot{}
\\lfoot{\\itshape\\today \\timeofday}
\\rfoot{\\itshape Page \\thepage\\ / \\pageref{LastPage}}
\\renewcommand{\\headrulewidth}{0pt}
\\fancypagestyle{plain}{%
\\fancyhf{}
\\setlength{\\headsep}{1mm}
\\addtolength{\\footskip}{4mm}
\\lfoot{\\itshape\\today \\timeofday}
\\rfoot{\\itshape Page \\thepage\\ / \\pageref{LastPage}}}
\\begin{document}
\\thispagestyle{plain}
{\\large
\\begin{tabular}[t]{rp{145mm}}
$header_str
\\end{tabular}}
\\hfill
\\vspace{5mm} \\hrule \\vspace{5mm}
\\begin{alltt}$Body\\end{alltt}
\\end{document}
EOF
    close($fh);

    my $cwd = getcwd();
    chdir($Tmpdir);
    for (1, 2) {
	system("@LATEX@ -interaction=nonstopmode mail.tex > /dev/null 2>&1");
    }
    system("@DVIPS@ -o mail.ps mail.dvi > /dev/null 2>&1");

    system("lpr -P$Printer mail.ps") if (!defined($DEBUG));

    chdir($cwd);
    if (!defined($DEBUG)) {
	unlink(glob("$Tmpdir/*")) || warn "unlink: $!";
	rmdir($Tmpdir) || warn "rmdir: $!";
    }
}

sub get_realname() {
    return '' if not defined $Header{'from'};

    if ($Header{'from'} =~ /^(\")?(.+)\1?\s*<(\S+)\@(\S+)>/) {
	return $2;
    } elsif ($Header{'from'} =~ /^(\S+)\@(\S+)\s*\(([^)]+)\)/) {
	return $3;
    } else {
	return $Header{'from'};
    }
}

sub format_header() {
    my $header_str = '';
    foreach my $h (split(/,/, lc($PrintHeaders))) {
	if (defined($Header{$h})) {
	    $Header{$h} = escape_specials($Header{$h});
	    $header_str .= "\\bfseries " if (defined($Bold{$h}));
	    $header_str .= header_ucfirst($h) . ": & ";
	    $header_str .= "\\bfseries " if (defined($Bold{$h}));
	    $header_str .= "$Header{$h} \\\\\n";
	} else {
	    $header_str .= "\n";
	}
    }
    return $header_str;
}

sub header_ucfirst($) {
    my ($h) = @_;
    return join('-', map { ucfirst } split('-', $h));
}

# Split lines to 80-chars per line.
sub split_line($) {
    my ($text) = @_;

    my $res = '';
    while (length($text) > 80) {
	my $tmp = substr($text, 0, 80);
	my $tmp2 = substr($text, 80);
	# considering multi-byte segmentation.
	if ($tmp =~ /\x8f$/ or $tmp =~ tr/\x8e\xa1-\xfe// % 2) {
	    $tmp2 = chop($tmp) . $tmp2;
	    $tmp2 = chop($tmp) . $tmp2 if ($tmp =~ /\x8f$/);
	}
	$res .= $tmp . "\n";
	$text = $tmp2;
	print "\$tmp: $tmp\n" if defined($DEBUG);
	print "\$tmp2: $tmp2\n" if defined($DEBUG);
    }
    $res .= $text;
    return $res;
}

sub escape_specials($) {
    my ($text) = (@_);
    my %specials = ('#' => '\\#',
		    '$' => '\\$',
		    '&' => '\\&',
		    '%' => '\\%',
		    '*' => '\\ast{}',
		    '\\' => '\\bs{}',
		    '^' => '\\^{}',
		    '_' => '\\_{}',
		    '{' => '\\{',
		    '}' => '\\}',
		    '~' => '\\~{}',
		   );
    $text =~ s/([#\$&%*\\^_{}~])/$specials{$1}/ge;
    return $text;
}

sub fopen($) {
    my ($file) = @_;
    my $fh = new IO::File;
    $fh->open("$file") || die "$file: $!";

    return $fh;
}

__END__

=head1 NAME

mnewsprint - E-mail メッセージの整形印刷ツール

=head1 SYNOPSIS

mnewsprint [B<--printer=PRINTER>] [B<--file=FILE>] [B<--header=LIST>]
    [B<--help>] [B<--version>]

=head1 DESCRIPTION

mnewsprintはE-mailメッセージを整形して印刷するスクリプトです。

=head1 OPTIONS

以下のオプションを指定できます。

=over 4

=item B<-P>, B<--printer=PRINTER>

出力するプリンタ名を指定します。
（デフォルトでは PRINTER 環境変数または "lp" です）

=item B<-f>, B<--file=FILE>

印刷すべきファイルを指定します。
（デフォルトでは標準入力から読み込みます）

=item B<-H>, -B<--header=LIST>

出力すべきメール・ヘッダを指定します。
（デフォルトでは "date,from,to,cc,newsgroups,subject" です）

=back

=head1 PREREQUISITES

このスクリプトはメールの整形に LaTeX2e を利用します。

=head1 NOTES

メールの日本語の文字コードの変換処理は行っていません。MIME 形式のメールにも未対応です。このスクリプトを利用する前に B<nkf> などのコード変換ツールやメールソフトウェアを利用して EUC-JP に変換してから渡してください。

=head1 AUTHOR

高久 雅生 <masao@ulis.ac.jp>
